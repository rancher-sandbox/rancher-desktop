name: Package

on:
  pull_request: {}
  push:
    branches:
      - main
    tags:
      - '*'
  workflow_dispatch: {}

defaults:
  run:
    shell: bash

jobs:
  package:
    strategy:
      matrix:
        os:
        - macos-10.15 # Intel build with Intel assets
        - macos-11    # Intel build with M1 assets
        - windows-2019
        - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
        persist-credentials: false
        # Needed to run `git describe` to get full version info
        fetch-depth: 0
    - uses: actions/setup-node@v2
      with:
        node-version: '16.x'
    - uses: actions/setup-python@v2
      with:
        python-version: '2.x'
    - uses: actions/setup-go@v2
      with:
        go-version: '^1.16'
    - name: Install Windows dependencies
      if: startsWith(matrix.os, 'windows-')
      shell: powershell
      run: .\scripts\windows-setup.ps1 -SkipVisualStudio -SkipTools
    - name: Install Flatpak dependencies
      if: startsWith(matrix.os, 'ubuntu-')
      run: |
          sudo apt-get update
          sudo apt-get install flatpak flatpak-builder
          flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
    - name: npm ci
      if: "!startsWith(matrix.os, 'macos-11')"
      run: npm ci
    - name: npm ci (for M1)
      if: startsWith(matrix.os, 'macos-11')
      run: M1=1 npm ci
    - name: npm run build
      run: |
        case "${{ matrix.os }}" in
          macos-10*)
            # Build Intel version with Intel assets
            npm run build -- --mac --publish=never
            ;;
          macos-11*)
            # Build Intel version with M1 assets
            M1=1 npm run build -- --mac --publish=never
            ;;
          windows-*)
            npm run build -- --win --publish=never
            ;;
          ubuntu-*)
            npm run build -- --linux --publish=never
            ;;
        esac
    - uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'macos-10')
      with:
        name: Rancher Desktop.x86_64.dmg
        path: dist/Rancher Desktop*.dmg
        if-no-files-found: error
    - uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'macos-10')
      with:
        name: Rancher Desktop-mac.x86_64.zip
        path: dist/Rancher Desktop*.zip
        if-no-files-found: error
    - uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'macos-11')
      with:
        name: Rancher Desktop.aarch64.dmg
        path: dist/Rancher Desktop*.dmg
        if-no-files-found: error
    - uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'macos-11')
      with:
        name: Rancher Desktop-mac.aarch64.zip
        path: dist/Rancher Desktop*.zip
        if-no-files-found: error
    - uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'windows-')
      with:
        name: Rancher Desktop Setup.exe
        path: dist/Rancher Desktop*.exe
        if-no-files-found: error
    - uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'windows-')
      with:
        name: Rancher Desktop-win.zip
        path: dist/Rancher Desktop-*-win.zip
        if-no-files-found: error
    - uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'ubuntu-')
      with:
        name: Rancher Desktop-linux.zip
        path: dist/rancher-desktop*.zip
        if-no-files-found: error
    - name: Copy linux zip to canary for main
      uses: canastro/copy-file-action@0.0.2
      if: ${{ startsWith(matrix.os, 'ubuntu-') && github.ref_name == 'main' }}
      with:
        source: "dist/rancher-desktop*.zip"
        target: "dist/rancher-desktop-canary.zip"
    - name: Copy canary to s3
      uses: prewk/s3-cp-action@v2
      if: ${{ startsWith(matrix.os, 'ubuntu-') && github.ref_name == 'main' }}
      with:
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        source: './dist/rancher-desktop-canary.zip'
        dest: 's3://rancher-desktop-assets-for-obs/rancher-desktop-canary.zip'
    - name: Trigger OBS services
      uses: distributhor/workflow-webhook@v2
      if: ${{ startsWith(matrix.os, 'ubuntu-') && github.ref_name == 'main' }}
      env:
        webhook_type: 'form-urlencoded'
        webhook_url: ${{ secrets.OBS_WEBHOOK_URL_CANARY }}
        webhook_secret: ${{ secrets.OBS_WEBHOOK_TOKEN_CANARY }}

  sign:
    name: Test Signing
    needs: package
    strategy:
      matrix:
        os:
        - windows-2019
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v2
      with:
        persist-credentials: false
    - name: Install Windows dependencies
      if: startsWith(matrix.os, 'windows-')
      shell: powershell
      run: .\scripts\windows-setup.ps1 -SkipVisualStudio -SkipTools
    - run: npm ci
    - uses: actions/download-artifact@v2
      if: startsWith(matrix.os, 'windows-')
      with:
        name: Rancher Desktop-win.zip
    - if: startsWith(matrix.os, 'windows-')
      shell: powershell
      run: |
        # Generate a test signing certificate
        $cert = New-SelfSignedCertificate `
          -Type Custom `
          -Subject "CN=Rancher-Sandbox, C=CA" `
          -KeyUsage DigitalSignature `
          -CertStoreLocation Cert:\CurrentUser\My `
          -FriendlyName "Rancher-Sandbox Code Signing" `
          -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3", "2.5.29.19={text}")
        Write-Output $cert
        $env:CSC_FINGERPRINT = $cert.Thumbprint
        # Run the signing script
        npm run sign -- (Get-Item "Rancher Desktop*-win.zip")
        # Check that the file was signed by the expected cert
        $usedCert = (Get-AuthenticodeSignature -FilePath 'dist\Rancher Desktop Setup*.exe').SignerCertificate
        Write-Output $usedCert
        if ($cert -ne $usedCert) {
          Write-Output "Expected Certificate" $cert "Actual Certificate" $usedCert
          Throw "Installer signed with wrong certicate"
        }
